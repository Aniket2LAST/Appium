<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="1" passed="1" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-08-06T15:14:40 IST" name="Default suite" finished-at="2025-08-06T15:17:10 IST" duration-ms="150360">
    <groups>
    </groups>
    <test started-at="2025-08-06T15:14:40 IST" name="Default test" finished-at="2025-08-06T15:17:10 IST" duration-ms="150360">
      <class name="testClass.ProcessorSignUpTest">
        <test-method is-config="true" signature="generateAndroidBenefitname()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:14:40 IST" name="generateAndroidBenefitname" finished-at="2025-08-06T15:14:40 IST" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateAndroidBenefitname -->
        <test-method is-config="true" signature="generateBenefitName()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:14:40 IST" name="generateBenefitName" finished-at="2025-08-06T15:14:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateBenefitName -->
        <test-method is-config="true" signature="generateBenefitOrderName()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:14:40 IST" name="generateBenefitOrderName" finished-at="2025-08-06T15:14:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateBenefitOrderName -->
        <test-method is-config="true" signature="generateBranchName()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:14:40 IST" name="generateBranchName" finished-at="2025-08-06T15:14:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateBranchName -->
        <test-method is-config="true" signature="generateBranchMemberName()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:14:40 IST" name="generateBranchMemberName" finished-at="2025-08-06T15:14:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateBranchMemberName -->
        <test-method is-config="true" signature="generateBonusName()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:14:40 IST" name="generateBonusName" finished-at="2025-08-06T15:14:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateBonusName -->
        <test-method is-config="true" signature="generateRandomBranchMemberNumber()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:14:40 IST" name="generateRandomBranchMemberNumber" finished-at="2025-08-06T15:14:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateRandomBranchMemberNumber -->
        <test-method is-config="true" signature="generateRandomLastName()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:14:40 IST" name="generateRandomLastName" finished-at="2025-08-06T15:14:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateRandomLastName -->
        <test-method is-config="true" signature="generateRandomNumber()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:14:40 IST" name="generateRandomNumber" finished-at="2025-08-06T15:14:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateRandomNumber -->
        <test-method is-config="true" signature="setup()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:14:40 IST" name="setup" finished-at="2025-08-06T15:14:57 IST" duration-ms="17253" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="signUpProcessor()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:14:57 IST" name="signUpProcessor" finished-at="2025-08-06T15:17:10 IST" duration-ms="132934" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- signUpProcessor -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:17:10 IST" name="afterMethod" finished-at="2025-08-06T15:17:10 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=signUpProcessor status=SUCCESS method=ProcessorSignUpTest.signUpProcessor()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="teardownalchemy()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:17:10 IST" name="teardownalchemy" finished-at="2025-08-06T15:17:10 IST" duration-ms="2" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "org.openqa.selenium.WebDriver.quit()" because "utilities.BaseClass.alcDriver" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "org.openqa.selenium.WebDriver.quit()" because "utilities.BaseClass.alcDriver" is null
at utilities.BaseClass.teardownalchemy(BaseClass.java:420)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:390)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:325)
at org.testng.internal.invokers.TestMethodWorker.invokeAfterClassConfigurations(TestMethodWorker.java:229)
at org.testng.internal.invokers.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:215)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:131)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardownalchemy -->
        <test-method is-config="true" signature="teardownapp()[pri:0, instance:testClass.ProcessorSignUpTest@1199fe66]" started-at="2025-08-06T15:17:10 IST" name="teardownapp" finished-at="2025-08-06T15:17:10 IST" duration-ms="0" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardownapp -->
      </class> <!-- testClass.ProcessorSignUpTest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
